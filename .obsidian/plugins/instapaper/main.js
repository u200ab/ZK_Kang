/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/oauth-1.0a/oauth-1.0a.js
var require_oauth_1_0a = __commonJS({
  "node_modules/oauth-1.0a/oauth-1.0a.js"(exports, module2) {
    if (typeof module2 !== "undefined" && typeof exports !== "undefined") {
      module2.exports = OAuth2;
    }
    function OAuth2(opts) {
      if (!(this instanceof OAuth2)) {
        return new OAuth2(opts);
      }
      if (!opts) {
        opts = {};
      }
      if (!opts.consumer) {
        throw new Error("consumer option is required");
      }
      this.consumer = opts.consumer;
      this.nonce_length = opts.nonce_length || 32;
      this.version = opts.version || "1.0";
      this.parameter_seperator = opts.parameter_seperator || ", ";
      this.realm = opts.realm;
      if (typeof opts.last_ampersand === "undefined") {
        this.last_ampersand = true;
      } else {
        this.last_ampersand = opts.last_ampersand;
      }
      this.signature_method = opts.signature_method || "PLAINTEXT";
      if (this.signature_method == "PLAINTEXT" && !opts.hash_function) {
        opts.hash_function = function(base_string, key) {
          return key;
        };
      }
      if (!opts.hash_function) {
        throw new Error("hash_function option is required");
      }
      this.hash_function = opts.hash_function;
      this.body_hash_function = opts.body_hash_function || this.hash_function;
    }
    OAuth2.prototype.authorize = function(request, token) {
      var oauth_data = {
        oauth_consumer_key: this.consumer.key,
        oauth_nonce: this.getNonce(),
        oauth_signature_method: this.signature_method,
        oauth_timestamp: this.getTimeStamp(),
        oauth_version: this.version
      };
      if (!token) {
        token = {};
      }
      if (token.key !== void 0) {
        oauth_data.oauth_token = token.key;
      }
      if (!request.data) {
        request.data = {};
      }
      if (request.includeBodyHash) {
        oauth_data.oauth_body_hash = this.getBodyHash(request, token.secret);
      }
      oauth_data.oauth_signature = this.getSignature(request, token.secret, oauth_data);
      return oauth_data;
    };
    OAuth2.prototype.getSignature = function(request, token_secret, oauth_data) {
      return this.hash_function(this.getBaseString(request, oauth_data), this.getSigningKey(token_secret));
    };
    OAuth2.prototype.getBodyHash = function(request, token_secret) {
      var body = typeof request.data === "string" ? request.data : JSON.stringify(request.data);
      if (!this.body_hash_function) {
        throw new Error("body_hash_function option is required");
      }
      return this.body_hash_function(body, this.getSigningKey(token_secret));
    };
    OAuth2.prototype.getBaseString = function(request, oauth_data) {
      return request.method.toUpperCase() + "&" + this.percentEncode(this.getBaseUrl(request.url)) + "&" + this.percentEncode(this.getParameterString(request, oauth_data));
    };
    OAuth2.prototype.getParameterString = function(request, oauth_data) {
      var base_string_data;
      if (oauth_data.oauth_body_hash) {
        base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.deParamUrl(request.url))));
      } else {
        base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.mergeObject(request.data, this.deParamUrl(request.url)))));
      }
      var data_str = "";
      for (var i = 0; i < base_string_data.length; i++) {
        var key = base_string_data[i].key;
        var value = base_string_data[i].value;
        if (value && Array.isArray(value)) {
          value.sort();
          var valString = "";
          value.forEach(function(item, i2) {
            valString += key + "=" + item;
            if (i2 < value.length) {
              valString += "&";
            }
          }.bind(this));
          data_str += valString;
        } else {
          data_str += key + "=" + value + "&";
        }
      }
      data_str = data_str.substr(0, data_str.length - 1);
      return data_str;
    };
    OAuth2.prototype.getSigningKey = function(token_secret) {
      token_secret = token_secret || "";
      if (!this.last_ampersand && !token_secret) {
        return this.percentEncode(this.consumer.secret);
      }
      return this.percentEncode(this.consumer.secret) + "&" + this.percentEncode(token_secret);
    };
    OAuth2.prototype.getBaseUrl = function(url) {
      return url.split("?")[0];
    };
    OAuth2.prototype.deParam = function(string) {
      var arr = string.split("&");
      var data = {};
      for (var i = 0; i < arr.length; i++) {
        var item = arr[i].split("=");
        item[1] = item[1] || "";
        if (data[item[0]]) {
          if (!Array.isArray(data[item[0]])) {
            data[item[0]] = [data[item[0]]];
          }
          data[item[0]].push(decodeURIComponent(item[1]));
        } else {
          data[item[0]] = decodeURIComponent(item[1]);
        }
      }
      return data;
    };
    OAuth2.prototype.deParamUrl = function(url) {
      var tmp = url.split("?");
      if (tmp.length === 1)
        return {};
      return this.deParam(tmp[1]);
    };
    OAuth2.prototype.percentEncode = function(str) {
      return encodeURIComponent(str).replace(/\!/g, "%21").replace(/\*/g, "%2A").replace(/\'/g, "%27").replace(/\(/g, "%28").replace(/\)/g, "%29");
    };
    OAuth2.prototype.percentEncodeData = function(data) {
      var result = {};
      for (var key in data) {
        var value = data[key];
        if (value && Array.isArray(value)) {
          var newValue = [];
          value.forEach(function(val) {
            newValue.push(this.percentEncode(val));
          }.bind(this));
          value = newValue;
        } else {
          value = this.percentEncode(value);
        }
        result[this.percentEncode(key)] = value;
      }
      return result;
    };
    OAuth2.prototype.toHeader = function(oauth_data) {
      var sorted = this.sortObject(oauth_data);
      var header_value = "OAuth ";
      if (this.realm) {
        header_value += 'realm="' + this.realm + '"' + this.parameter_seperator;
      }
      for (var i = 0; i < sorted.length; i++) {
        if (sorted[i].key.indexOf("oauth_") !== 0)
          continue;
        header_value += this.percentEncode(sorted[i].key) + '="' + this.percentEncode(sorted[i].value) + '"' + this.parameter_seperator;
      }
      return {
        Authorization: header_value.substr(0, header_value.length - this.parameter_seperator.length)
        //cut the last chars
      };
    };
    OAuth2.prototype.getNonce = function() {
      var word_characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
      var result = "";
      for (var i = 0; i < this.nonce_length; i++) {
        result += word_characters[parseInt(Math.random() * word_characters.length, 10)];
      }
      return result;
    };
    OAuth2.prototype.getTimeStamp = function() {
      return parseInt((/* @__PURE__ */ new Date()).getTime() / 1e3, 10);
    };
    OAuth2.prototype.mergeObject = function(obj1, obj2) {
      obj1 = obj1 || {};
      obj2 = obj2 || {};
      var merged_obj = obj1;
      for (var key in obj2) {
        merged_obj[key] = obj2[key];
      }
      return merged_obj;
    };
    OAuth2.prototype.sortObject = function(data) {
      var keys = Object.keys(data);
      var result = [];
      keys.sort();
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        result.push({
          key,
          value: data[key]
        });
      }
      return result;
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => InstapaperPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/api.ts
var import_crypto = __toESM(require("crypto"));
var import_oauth_1 = __toESM(require_oauth_1_0a());
var import_obsidian = require("obsidian");
var DEFAULT_OPTIONS = {
  baseURL: "https://www.instapaper.com/api"
};
var InstapaperAPI = class {
  constructor(consumerKey, consumerSecret, options) {
    this.oauth = new import_oauth_1.default({
      consumer: {
        key: consumerKey,
        secret: consumerSecret
      },
      signature_method: "HMAC-SHA1",
      hash_function(base_string, key) {
        return import_crypto.default.createHmac("sha1", key).update(base_string).digest("base64");
      },
      parameter_seperator: ", "
    });
    this.options = Object.assign({}, DEFAULT_OPTIONS, options);
  }
  async fetch(request, token) {
    const authorization = this.oauth.authorize(request, token);
    let url = request.url;
    if (request.data && request.method == "GET") {
      url += "?" + new URLSearchParams(request.data).toString();
    }
    return await (0, import_obsidian.requestUrl)({
      url,
      method: request.method,
      contentType: "application/x-www-form-urlencoded",
      body: request.data ? new URLSearchParams(request.data).toString() : void 0,
      headers: { ...this.oauth.toHeader(authorization) },
      throw: true
    });
  }
  async getAccessToken(username, password) {
    const response = await this.fetch(
      {
        url: `${this.options.baseURL}/1.1/oauth/access_token`,
        method: "POST",
        data: {
          x_auth_username: username,
          x_auth_password: password,
          x_auth_mode: "client_auth"
        }
      }
    );
    const params = new URLSearchParams(response.text);
    const key = params.get("oauth_token") || "";
    const secret = params.get("oauth_token_secret") || "";
    return { key, secret };
  }
  async verifyCredentials(token) {
    const response = await this.fetch(
      {
        url: `${this.options.baseURL}/1.1/account/verify_credentials`,
        method: "POST"
      },
      token
    );
    const data = await response.json;
    return data[0];
  }
  async getHighlights(token, data) {
    const response = await this.fetch(
      {
        url: `${this.options.baseURL}/highlights`,
        method: "GET",
        data
      },
      token
    );
    const { highlights, bookmarks } = await response.json;
    return {
      highlights,
      bookmarks: Object.fromEntries(bookmarks.map((b) => [b.bookmark_id, b]))
    };
  }
};

// src/settings.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  token: void 0,
  account: void 0,
  notesFolder: "Instapaper Notes",
  notesCursor: 0,
  notesFrequency: 0,
  notesSyncOnStart: true
};
var InstapaperSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.addAccountSetting(containerEl);
    new import_obsidian2.Setting(containerEl).setName("Notes Sync").setHeading();
    new import_obsidian2.Setting(containerEl).setName("Notes folder").setDesc("Folder in which your notes and highlights will be synced").addText((text) => {
      text.setValue(this.plugin.settings.notesFolder);
      text.onChange(async (value) => {
        const previousPath = this.plugin.settings.notesFolder;
        const newPath = (0, import_obsidian2.normalizePath)(value);
        await this.plugin.saveSettings({ notesFolder: newPath });
        const previousFile = this.app.vault.getAbstractFileByPath(previousPath);
        if (previousFile instanceof import_obsidian2.TFolder) {
          await previousFile.vault.rename(previousFile, newPath);
        }
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Sync frequency").setDesc("The frequency at which Obsidian (when running) will automatically sync your notes").addDropdown((dropdown) => {
      dropdown.addOption("0", "Manual");
      dropdown.addOption("60", "Hourly");
      dropdown.addOption("720", "Every 12 hours");
      dropdown.addOption("1440", "Every 24 hours");
      dropdown.setValue(Number(this.plugin.settings.notesFrequency).toString());
      dropdown.onChange(async (value) => {
        await this.plugin.saveSettings({ notesFrequency: parseInt(value) });
        await this.plugin.updateNotesSyncInterval();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Sync on start").setDesc("Automatically sync when Obsidian starts or an account is connected").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.notesSyncOnStart);
      toggle.onChange(async (value) => {
        await this.plugin.saveSettings({ notesSyncOnStart: value });
      });
    });
  }
  addAccountSetting(containerEl) {
    const setting = new import_obsidian2.Setting(containerEl).setName("Instapaper account");
    if (this.plugin.settings.account) {
      return setting.setDesc(`Connected as: ${this.plugin.settings.account.username}`).addButton((button) => {
        button.setButtonText("Disconnect");
        button.setTooltip("Disconnect your Instapaper account");
        button.onClick(async () => {
          this.plugin.disconnectAccount();
          this.plugin.notice("Disconnected Instapaper account");
          this.display();
        });
      });
    }
    return setting.setDesc("Connect your Instapaper account").addButton((button) => {
      button.setButtonText("Connect");
      button.setTooltip("Connect your Instapaper account");
      button.setCta();
      button.onClick(async () => {
        new ConnectAccountModal(this.app, async (username, password) => {
          try {
            const account = await this.plugin.connectAccount(username, password);
            this.plugin.notice(`Connected Instapaper account: ${account.username}`);
          } catch (e) {
            console.log("Failed to connect account:", e);
            this.plugin.disconnectAccount();
            this.plugin.notice("Failed to connect Instapaper account");
          }
          this.display();
        }).open();
      });
    });
  }
};
var ConnectAccountModal = class extends import_obsidian2.Modal {
  constructor(app, onConnect) {
    super(app);
    this.onConnect = onConnect;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Instapaper account" });
    function updateConnectButton() {
      const valid = usernameEl.checkValidity() && passwordEl.checkValidity();
      connectButton.setDisabled(!valid);
    }
    const usernameEl = new import_obsidian2.Setting(contentEl).setName("Email or username").addText((text) => {
      text.inputEl.required = true;
      text.onChange((value) => {
        this.username = value;
        updateConnectButton();
      });
    }).components[0].inputEl;
    const passwordEl = new import_obsidian2.Setting(contentEl).setName("Password (if you have one)").addText((text) => {
      text.inputEl.type = "password";
      text.onChange((value) => {
        this.password = value;
        updateConnectButton();
      });
    }).components[0].inputEl;
    const connectButton = new import_obsidian2.Setting(contentEl).addButton((button) => {
      button.setCta();
      button.setButtonText("Connect");
      button.setDisabled(true);
      button.onClick(() => {
        this.close();
        this.onConnect(this.username, this.password);
      });
    }).components[0];
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/notes.ts
var import_obsidian3 = require("obsidian");
var linkSymbol = "\xA7";
async function syncNotes(plugin, token, cursor) {
  const { vault, fileManager } = plugin.app;
  const folder = (0, import_obsidian3.normalizePath)(plugin.settings.notesFolder);
  if (!await vault.adapter.exists(folder)) {
    await vault.createFolder(folder);
    cursor = 0;
  }
  let highlights;
  let count = 0;
  do {
    let bookmarks;
    try {
      ({ highlights, bookmarks } = await plugin.api.getHighlights(token, {
        after: cursor,
        sort: "asc"
      }));
    } catch (e) {
      plugin.log("Failed to get highlights:", e);
      return { cursor, count };
    }
    for (const highlight of highlights) {
      cursor = highlight.highlight_id;
      const article = bookmarks[highlight.article_id];
      if (!article)
        continue;
      const file = await fileForArticle(article, vault, folder);
      if (!file)
        continue;
      fileManager.processFrontMatter(file, (frontmatter) => {
        frontmatter["url"] = article.url;
        frontmatter["date"] = formatTimestamp(article.time);
        if (article.pubtime) {
          frontmatter["pubdate"] = formatTimestamp(article.pubtime);
        }
        if (article.author) {
          frontmatter["author"] = article.author;
        }
      });
      if (!hasHighlight(await vault.read(file), highlight)) {
        await vault.append(file, contentForHighlight(highlight));
        count++;
      }
    }
  } while (highlights.length > 0);
  return { cursor, count };
}
async function fileForArticle(article, vault, folder) {
  const name = article.title.replace(/[\\/:]/gm, "").substring(0, 250);
  const notePath = (0, import_obsidian3.normalizePath)(`${folder}/${name}.md`);
  const abstractFile = vault.getAbstractFileByPath(notePath);
  if (abstractFile instanceof import_obsidian3.TFile) {
    return abstractFile;
  }
  if (abstractFile instanceof import_obsidian3.TFolder) {
    console.log("%s is a folder; expected a file", abstractFile.path);
    return null;
  }
  return vault.create(notePath, "");
}
function linkForHighlight(highlight) {
  return `https://www.instapaper.com/read/${highlight.article_id}/${highlight.highlight_id}`;
}
function hasHighlight(content, highlight) {
  return content.contains(linkForHighlight(highlight));
}
function contentForHighlight(highlight) {
  let content = highlight.text.replace(/^/gm, "> ");
  content += ` [${linkSymbol}](${linkForHighlight(highlight)})`;
  content += "\n\n";
  if (highlight.note) {
    content += highlight.note + "\n\n";
  }
  return content;
}
function formatTimestamp(timestamp) {
  const date = new Date(timestamp * 1e3);
  return `${date.getFullYear().toString().padStart(4, "0")}-${(date.getMonth() + 1).toString().padStart(2, "0")}-${date.getDate().toString().padStart(2, "0")}`;
}

// src/main.ts
var InstapaperPlugin = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.notesSyncInProgress = false;
  }
  async onload() {
    this.api = new InstapaperAPI(
      // @ts-expect-error
      "a50094964b804f5780b6b9d6d55661ec",
      "3805a15607374a0dabc716f7e7f007d1"
    );
    await this.loadSettings();
    this.addSettingTab(new InstapaperSettingTab(this.app, this));
    this.addCommand({
      id: "sync-notes",
      name: "Sync notes",
      checkCallback: (checking) => {
        const token = this.settings.token;
        if (!token) {
          return false;
        }
        if (!checking) {
          (async () => {
            const count = await this.runNotesSync("manual");
            this.notice(`Updated ${count} Instapaper note${count == 1 ? "" : "s"}`);
          })();
        }
        return true;
      }
    });
    await this.updateNotesSyncInterval();
    if (this.settings.notesSyncOnStart && this.settings.token) {
      this.app.workspace.onLayoutReady(async () => {
        await this.runNotesSync("on start");
      });
    }
  }
  onunload() {
  }
  log(message, ...args) {
    console.log("[instapaper] " + message, ...args);
  }
  notice(message) {
    this.log(message);
    return new import_obsidian4.Notice(message);
  }
  // SETTINGS
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings(updates) {
    this.settings = {
      ...this.settings,
      ...updates
    };
    await this.saveData(this.settings);
  }
  // ACCOUNT
  async connectAccount(username, password) {
    const token = await this.api.getAccessToken(username, password);
    const account = await this.api.verifyCredentials(token);
    await this.saveSettings({
      token,
      account
    });
    await this.updateNotesSyncInterval();
    if (this.settings.notesSyncOnStart) {
      await this.runNotesSync("on connect");
    }
    return account;
  }
  async disconnectAccount() {
    await this.saveSettings({
      token: void 0,
      account: void 0
    });
    this.clearNotesSyncInterval();
  }
  // SYNC
  async runNotesSync(reason) {
    const token = this.settings.token;
    if (!token)
      return 0;
    if (this.notesSyncInProgress) {
      this.log("Notes sync is already in progress");
      return 0;
    }
    this.notesSyncInProgress = true;
    this.log(`Synchronizing notes (${reason})`);
    let count = 0;
    try {
      let cursor;
      ({ cursor, count } = await syncNotes(this, token, this.settings.notesCursor));
      await this.saveSettings({ notesCursor: cursor });
    } catch (e) {
      this.log("Notes sync failure:", e);
    } finally {
      this.notesSyncInProgress = false;
    }
    return count;
  }
  clearNotesSyncInterval() {
    window.clearInterval(this.notesSyncInterval);
    this.notesSyncInterval = void 0;
  }
  async updateNotesSyncInterval() {
    this.log(
      "Setting notes sync frequency to",
      this.settings.notesFrequency,
      this.settings.notesFrequency ? "minutes" : "(manual)"
    );
    this.clearNotesSyncInterval();
    const timeout = this.settings.notesFrequency * 60 * 1e3;
    if (!timeout)
      return;
    this.notesSyncInterval = window.setInterval(() => {
      this.runNotesSync("scheduled");
    }, timeout);
    this.registerInterval(this.notesSyncInterval);
  }
};
//# sourceMappingURL=data:application/json;base64,
